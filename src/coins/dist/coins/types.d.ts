import { TFeeResponse } from '../utils/api/types';
export declare type TProvider = {
    generateAddress: (symbol: string, chain: string, tokenChain?: string) => Promise<TGenerateAddress | null>;
    importPrivateKey?: (privateKey: string, symbol: string) => Promise<string | null>;
    getExplorerLink: (address: string, chain: string, tokenChain?: string, contractAddress?: string, symbol?: string) => string;
    getTransactionLink: (hash: string, chain: string) => string;
    getStandingFee?: (symbol: string, chain: string, tokenChain?: string) => number;
    createInternalTx?: (props: TInternalTxProps) => Promise<string | null>;
    validateAddress: (address: string, symbol: string, chain: string) => boolean;
    createTx?: (props: TCreateTxProps) => Promise<string | null>;
    formatValue: (value: string | number, type: 'from' | 'to', symbol: string) => number;
    importRecoveryPhrase?: (recoveryPhrase: string, symbol: string, chain: string) => Promise<TGenerateAddress | null>;
    generateExtraId?: () => string;
    config: TCurrencyConfig;
    getNetworkFee?: (props: TFeeProps) => Promise<TFeeResponse | null>;
};
export declare type TGenerateAddress = {
    address: string;
    privateKey: string;
    mnemonic?: string;
};
export declare type TUnspentOutput = {
    txId: string;
    outputIndex: number;
    script: string;
    satoshis: number;
    address: string;
};
export declare type TInternalTxProps = {
    symbol: string;
    addressFrom: string;
    addressTo: string;
    amount: string;
    privateKey?: string;
    networkFee: number;
    outputs?: TUnspentOutput[];
    extraId?: string;
    mnemonic?: string;
    tokenChain?: string;
    contractAddress?: string;
    decimals?: number;
    chain: string;
};
export declare type TFeeProps = {
    symbol: string;
    amount: string;
    from: string;
    chain: string;
    outputs: TUnspentOutput[];
    addressFrom: string;
    tokenChain?: string;
    contractAddress?: string;
    decimals?: number;
    extraId?: string;
};
export declare type TCreateTxProps = {
    symbol: string;
    chain: string;
    addressFrom: string;
    addressTo: string;
    amount: string;
    privateKey?: string | null;
    utxos: TUnspentOutput[];
    fee: number;
    tokenChain?: string;
    contractAddress?: string;
    extraId?: string;
    decimals?: number;
    mnemonic?: string;
    minCurrencyAmount?: number;
};
export declare type TCurrencyConfig = {
    coins: string[];
    isInternalTx?: boolean;
    isWithOutputs?: boolean;
    isZeroFee?: boolean;
    extraIdName?: string;
    isWithPhrase?: boolean;
    wordsSize?: number[];
    isGenerateExtraId?: boolean;
    isFeeApproximate?: boolean;
};
