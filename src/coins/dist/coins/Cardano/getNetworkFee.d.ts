import { TokenBundle, TxInput, TxOutput, TxCertificate, TxWithdrawal, TokenObject, Token, CborizedTxOutput, TxPlanResult, CborizedTxCertificate, CborizedTxInput, CborizedTxWithdrawals } from './types';
export declare const bechAddressToHex: (address: string) => string;
export declare const base58AddressToHex: (address: string) => string;
export declare const addressToHex: (address: string) => string;
export declare const arraySum: (numbers: Array<number>) => number;
export declare const parseToken: (token: TokenObject) => Token;
export declare const aggregateTokenBundles: (tokenBundle: TokenBundle[]) => TokenBundle;
export declare const cborizeTxCertificates: (certificates: TxCertificate[]) => CborizedTxCertificate[];
export declare const cborizeTxInputs: (inputs: TxInput[]) => CborizedTxInput[];
export declare const cborizeTxOutputs: (outputs: TxOutput[]) => CborizedTxOutput[];
export declare const cborizeTxWithdrawals: (withdrawals: TxWithdrawal[]) => CborizedTxWithdrawals;
export declare const getTokenBundlesDifference: (tokenBundle1: TokenBundle, tokenBundle2: TokenBundle) => TokenBundle;
declare const getNetworkFee: (amount: number, addressFrom: string, addressTo: string, outputs: any[]) => Promise<TxPlanResult | null>;
export default getNetworkFee;
